php.ini
display_errors = On
error_reporting = E_ALL

PHP code, na początku pliku i bloku PHP
ini_set("display_errors", "On");
lub
ini_set("display_errors", "1");
error_reporting(E_ALL);

// E_STRICT dodane w PHP 5, od 5.4 zawiera się w E_ALL
// error_reporting(E_ALL | E_STRICT);

// ominięcie danej kategorii błędów
// deprecated - scheduled to removal
error_reporting(E_ALL & ~E_DEPRECATED);

// zwraca jedną liczbę na podstawie wszystkich ustawionych stałych (suma)
error_reporting();

// 32767 - mam E_ALL, ale jest inna wartość
error_reporting
file_uploads = On
// logi nie idą na dysk
lof_errors = Off

Fatal Errors
Syntax Errors
Warning
Notices

wyłączmy raportowanie błędów w środowisku produkcyjnym (PHP i tak generuje te informacje)
po wyłączeniu raportowania wciąż mamy logi błędów na serwerze

echo $variable;
print_r($variable);
gettype($variable);

// wszystko o typie i wartości zmiennej
var_dump($variable);

print_r(get_defined_vars());

// stos/historia uruchomienia funkcji, wewnątrz funkcji
debug_backtrace();
var_dump(debug_backtrace());

3rd Party Tools
Xdebug
DBG
FirePHP (używa Firebug w Firefoksie, daje debug output na konsolę Firebug)

URLs/Links GET
Forms POST
Cookies COOKIE

Reserved Chars in HTML
< &lt;
> &gt;
& &amp;
" &quot;

header (nagłówek) HTTP musi być przed jakąkolwiek zawartością HTML,
nawet przed spacją, uwaga na dodane (included) pliki
plik PHP, który nie daje HTML output, może być załadowany przed nagłówkiem HTTP

output buffering
php.ini
output_buffering = 4096
maximum
On - unlimited
mam tyle znaków przed przekazaniem bufora do serwera, w tym "czasie" mogę zmieniać nagłówek
page by page
ob_start() - przed jakąkolwiek zawartością HTML
ob_end_flush()
można też to zrobić nawet w przypadku zmiany w php.ini (ale po co?)
jak już się decydujemy, to najlepiej dla całej aplikacji

str null -> str
bool other -> bool
number other -> number

empty()
"" 0 "0" null false array()

ciasteczka wracają do użytkownika w nagłówku strony
ciasteczka idą do serwera w nagłówku strony
konieczne jest wysłanie zapytania (request) przez użytkownika
konieczne jest wysłanie odpowiedzi (response) przez serwer

sesja jest przechowywana na serwerze
u użytkownika są zapisywane ciasteczka
są to referencje do sesji

pros:
większy (>4000 znaków) storage
mały rozmiar żądania (request), nie jest za każdym żądaniem przesyłane
całe ciasteczko, tylko id sesji
dane są niewidoczne, użytkownik dysponuje tylko id sesji (w ciasteczkach widzimy wszystko)
cons:
wolniejszy dostęp
sesja wygasa wraz z zamknięciem przeglądarki (by design), wygasają też ciasteczka z id
pliki sesji pozostają, konieczne czyszczenie

mechanizm sesji jest zautomatyzowany, sesje są przechowywane w $_SESSION

db interaction:
-create connection (1 per script)
-query
-use data
-release data
-close connection (1 per script)

addslashes($string)
automatycznie dla GET, POST, COOKIE od PHP 2, usunięte w PHP 5.4

od PHP 5 mamy (od 4.3 do 5 była wersja mysql_)
mysqli_real_escape_string($db, $string)

prepared statements
tworzymy szablon, do którego można potem wstawić dane
parsowanie zapytania następuje tylko raz
normalnie każde zapytanie jest parsowane osobno
separacja zapytania od dynamicznych danych
zapobiega atakowi SQL injection
nie trzeba robić escape string, to idzie z automatu

$username = 'gulci';
$password = 'gulci';
$query = "select id, first_name, last_name ";
$query .= "from users ";
$query .= "where username = ? and password = ?";
$stmt = mysqli_prepare($connection, $query);
mysqli_stmt_bind_param($stmt, 'ss', $username, $password);
mysqli_stmt_execute($stmt);
mysqli_stmt_bind_result($stmt, $id, $first_name, $last_name);
mysqli_stmt_fetch($stmt);
mysqli_stmt_close($stmt);

skrócona składnia dla echo
<?= $name; ?> może być zmienna, liczba, string (single value)
od PHP 5.4 działa automatycznie
wcześniej trzeba było zmienić short_open_tag w php.ini

błąd - zawsze wcześniejsza linia

1 fatal error
2 recoverable error - występuje przy wyrzuceniu wyjątku
3 parse error - nie przetwarza dalej html
4 warning - np. brak pliku z include
5 deprecated
6 strict - kod niezgodny z dobrymi praktykami
7 notice

if(error occurs) {
    throw new Exceptio("Houston, we have a problem.");
}

try, catch - przechwycenie błędu, w catch można np. przekierować do odpowiedniej strony
zawsze w parze
try {
    // badany kod
} catch (Exception $e) {
    echo $e->getMessage();
}


nie ma dostępu do mysql z serwera PHP
konieczne jest rozszerzenie
sudo dnf install php-mysqlnd
potem możemy to usunąć
sudo cp /usr/lib64/php/modules/mysqli.so \
/opt/lampp/lib/php/extensions/no-debug-non-zts-20131226/
zmiany w
/opt/lampp/etc/php.ini
extension=php_mysqli.so
extension_dir jest aktywna, nie trzeba nic zmieniać
sudo dnf install php-mysqlnd

UWAGA!!!
trzeba pisać pełną ścieżkę do php, bo inaczej bierze z tego, które jest w systemie
a my chcemy z lamp
/opt/lampp/bin/php -S localhost:8888 -t public
oczywiście numer z dograniem dodatku trzeba zrobić
